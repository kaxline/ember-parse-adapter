var EmberParseAdapter={};EmberParseAdapter.Transforms={},EmberParseAdapter.Serializer=DS.RESTSerializer.extend({primaryKey:"objectId",extractArray:function(e,r,t){var a={};return a[Ember.String.pluralize(r.typeKey)]=t.results,this._super(e,r,a)},extractSingle:function(e,r,t,a){var n={};return n[r.typeKey]=t,this._super(e,r,n,a)},typeForRoot:function(e){return Ember.String.dasherize(Ember.String.singularize(e))},extract:function(e,r,t,a,n){return null===a||"updateRecord"!==n&&"deleteRecord"!==n||(t[this.get("primaryKey")]=a),this._super(e,r,t,a,n)},extractMeta:function(e,r,t){t&&t.count&&(e.metaForType(r,{count:t.count}),delete t.count)},normalizeAttributes:function(e,r){e.eachAttribute(function(e,t){"date"===t.type&&"object"===Ember.typeOf(r[e])&&r[e].iso&&(r[e]=r[e].iso)}),this._super(e,r)},normalizeRelationships:function(e,r){var t=this.get("store"),a=this;e.eachRelationship(function(e,n){var i=n.options;r[e]&&"belongsTo"===n.kind&&(r[e]=r[e].objectId),r[e]&&"hasMany"===n.kind&&(i.relation&&(r.links={},r.links[e]={type:n.type,key:e}),i.array&&r[e].length&&r[e]&&r[e].forEach(function(e,r,i){"Pointer"===e.__type?i[r]=e.objectId:(delete e.__type,delete e.className,e.id=e.objectId,delete e.objectId,e.type=n.type,a.normalizeAttributes(n.type,e),a.normalizeRelationships(n.type,e),t.push(n.type,e))}))},this),this._super(e,r)},serializeIntoHash:function(e,r,t,a){Ember.merge(e,this.serialize(t,a))},serializeAttribute:function(e,r,t,a){"createdAt"===t||"updatedAt"===t||"emailVerified"===t||"sessionToken"===t?delete r[t]:this._super(e,r,t,a)},serializeBelongsTo:function(e,r,t){var a=t.key,n=e.get(a);if(n){if(n instanceof DS.PromiseObject){if(!n.get("isFulfilled"))throw Error("belongsTo values *must* be fulfilled before attempting to serialize them");n=n.get("content")}r[a]={__type:"Pointer",className:this.parseClassName(n.constructor.typeKey),objectId:n.get("id")}}},parseClassName:function(e){return"parseUser"===e?"_User":Ember.String.capitalize(Ember.String.camelize(e))},serializeHasMany:function(e,r,t){var a=t.key,n=e.get(a),i=t.options;if(n&&n.get("length")>0){r[a]={objects:[]},i.relation&&(r[a].__op="AddRelation"),i.array&&(r[a].__op="AddUnique");var s=this;if(n.forEach(function(e){r[a].objects.push({__type:"Pointer",className:s.parseClassName(e.constructor.typeKey),objectId:e.get("id")})}),n._deletedItems&&n._deletedItems.length){if(i.relation){var o=r[a],u={__op:"RemoveRelation",objects:[]};n._deletedItems.forEach(function(e){u.objects.push({__type:"Pointer",className:e.type,objectId:e.id})}),r[a]={__op:"Batch",ops:[o,u]}}i.array&&(r[a].deleteds={__op:"Remove",objects:[]},n._deletedItems.forEach(function(e){r[a].deleteds.objects.push({__type:"Pointer",className:e.type,objectId:e.id})}))}}else r[a]=[]}}),EmberParseAdapter.Adapter=DS.RESTAdapter.extend({defaultSerializer:"-parse",init:function(){this._super(),this.set("headers",{"X-Parse-Application-Id":this.get("applicationId"),"X-Parse-REST-API-Key":this.get("restApiId")})},host:"https://api.parse.com",namespace:"1",classesPath:"classes",pathForType:function(e){return"parseUser"===e?"users":"login"===e?"login":"function"===e?"functions":this.classesPath+"/"+this.parsePathForType(e)},parsePathForType:function(e){return Ember.String.capitalize(Ember.String.camelize(e))},createRecord:function(e,r,t){var a={},n=e.serializerFor(r.typeKey);n.serializeIntoHash(a,r,t,{includeId:!0});var i=this;return new Ember.RSVP.Promise(function(e,t){i.ajax(i.buildURL(r.typeKey),"POST",{data:a}).then(function(r){var t=Ember.merge(a,r);e(t)},function(e){t(e.responseJSON)})})},updateRecord:function(e,r,t){var a={},n={},i=!1,s=e.serializerFor(r.typeKey);s.serializeIntoHash(a,r,t);var o=t.get("id"),u=this;return"parseUser"===r.typeKey&&delete a.password,r.eachRelationship(function(e){a[e]&&a[e].deleteds&&(n[e]=a[e].deleteds,delete a[e].deleteds,i=!0)}),new Ember.RSVP.Promise(function(e,t){i?u.ajax(u.buildURL(r.typeKey,o),"PUT",{data:n}).then(function(){u.ajax(u.buildURL(r.typeKey,o),"PUT",{data:a}).then(function(r){var t=Ember.merge(a,r);e(t)},function(e){t("Failed to save parent in relation: "+e.response.JSON)})},function(e){t(e.responseJSON)}):u.ajax(u.buildURL(r.typeKey,o),"PUT",{data:a}).then(function(r){var t=Ember.merge(a,r);e(t)},function(e){t(e.responseJSON)})})},parseClassName:function(e){return"parseUser"===e?"_User":Ember.String.capitalize(Ember.String.camelize(e))},findHasMany:function(e,r,t){var a={where:{$relatedTo:{object:{__type:"Pointer",className:this.parseClassName(r.typeKey||r.constructor.typeKey),objectId:r.get("id")},key:t.key}}};return this.ajax(this.buildURL(t.type.typeKey),"GET",{data:a})},findQuery:function(e,r,t){return t.where&&"string"!==Ember.typeOf(t.where)&&(t.where=JSON.stringify(t.where)),this._super(e,r,t)},sessionToken:Ember.computed("headers.X-Parse-Session-Token",function(e,r){return 2>arguments.length?this.get("headers.X-Parse-Session-Token"):(this.set("headers.X-Parse-Session-Token",r),r)})}),EmberParseAdapter.ParseUser=DS.Model.extend({username:DS.attr("string"),password:DS.attr("string"),email:DS.attr("string"),emailVerified:DS.attr("boolean"),sessionToken:DS.attr("string"),createdAt:DS.attr("date"),updatedAt:DS.attr("date")}),EmberParseAdapter.ParseUser.reopenClass({current:function(e){if(Ember.isEmpty(this.typeKey))throw Error("ParseUser.current must be called on a model fetched via store.modelFor");var r=this,t=e.adapterFor(r),a=e.serializerFor(r);return t.ajax(t.buildURL("parseUser","me"),"GET",{}).then(function(t){return a.normalize(r,t),e.push(r,t)},function(e){return Ember.RSVP.reject(e.responseJSON)})},requestPasswordReset:function(e){var r=this.get("store").adapterFor(this),t={email:e};return r.ajax(r.buildURL("requestPasswordReset"),"POST",{data:t})["catch"](function(e){return Ember.RSVP.reject(e.responseJSON)})},login:function(e,r){if(Ember.isEmpty(this.typeKey))throw Error("Parse login must be called on a model fetched via store.modelFor");var t=this,a=e.adapterFor(t),n=e.serializerFor(t);return a.ajax(a.buildURL("login"),"GET",{data:r}).then(function(r){n.normalize(t,r);var a=e.push(t,r);return a},function(e){return Ember.RSVP.reject(e.responseJSON)})},signup:function(e,r){if(Ember.isEmpty(this.typeKey))throw Error("Parse signup must be called on a model fetched via store.modelFor");var t=this,a=e.adapterFor(t),n=e.serializerFor(t);return a.ajax(a.buildURL(t.typeKey),"POST",{data:r}).then(function(a){n.normalize(t,a),a.email=a.email||r.email,a.username=a.username||r.username;var i=e.push(t,a);return i},function(e){return Ember.RSVP.reject(e.responseJSON)})}}),EmberParseAdapter.GeoPoint=Ember.Object.extend({latitude:Ember.computed(function(){return this._latitude}).readOnly(),longitude:Ember.computed(function(){return this._longitude}).readOnly(),init:function(e,r){this._latitude=e,this._longitude=r}}),EmberParseAdapter.File=Ember.Object.extend({name:Ember.computed(function(){return this._name}).readOnly(),url:Ember.computed(function(){return this._url}).readOnly(),init:function(e,r){this._name=e,this._url=r}}),EmberParseAdapter.ACL=Ember.Object.extend({}),EmberParseAdapter.Transforms.ACL=DS.Transform.extend({deserialize:function(e){return e?new EmberParseAdapter.ACL(e):null},serialize:function(e){if(!e)return null;var r={};return Object.keys(e).forEach(function(t){r[t]=e.get(t)}),r}}),EmberParseAdapter.Transforms.GeoPoint=DS.Transform.extend({deserialize:function(e){return e?new EmberParseAdapter.GeoPoint(e.latitude,e.longitude):null},serialize:function(e){return e?{__type:"GeoPoint",latitude:e.get("latitude"),longitude:e.get("longitude")}:null}}),EmberParseAdapter.Transforms.File=DS.Transform.extend({deserialize:function(e){return e?new EmberParseAdapter.File(e.name,e.url):null},serialize:function(e){return e?{__type:"File",name:e.get("name"),url:e.get("url")}:null}}),EmberParseAdapter.Transforms.Date=DS.Transform.extend({deserialize:function(e){return e?new Date(e.iso):null},serialize:function(e){return e?{__type:"Date",iso:e.toISOString()}:null}}),EmberParseAdapter.setupContainer=function(e){e.register("adapter:-parse",EmberParseAdapter.Adapter),e.register("serializer:-parse",EmberParseAdapter.Serializer),e.register("model:parse-user",EmberParseAdapter.ParseUser),e.register("transform:parse-geo-point",EmberParseAdapter.Transforms.GeoPoint),e.register("transform:parse-file",EmberParseAdapter.Transforms.File),e.register("transform:parse-date",EmberParseAdapter.Transforms.Date),e.register("transform:parse-acl",EmberParseAdapter.Transforms.ACL)},Ember.onLoad("Ember.Application",function(e){e.initializer({after:"ember-data",name:"parse-adapter",initialize:function(e){EmberParseAdapter.setupContainer(e)}})});