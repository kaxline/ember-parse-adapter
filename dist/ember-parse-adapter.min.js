var EmberParseAdapter={};EmberParseAdapter.Transforms={},EmberParseAdapter.Serializer=DS.RESTSerializer.extend({primaryKey:"objectId",extractArray:function(a,b,c){var d={};return d[Ember.String.pluralize(b.typeKey)]=c.results,this._super(a,b,d)},extractSingle:function(a,b,c,d){var e={};return e[b.typeKey]=c,this._super(a,b,e,d)},typeForRoot:function(a){return Ember.String.dasherize(Ember.String.singularize(a))},extract:function(a,b,c,d,e){return null===d||"updateRecord"!==e&&"deleteRecord"!==e||(c[this.get("primaryKey")]=d),this._super(a,b,c,d,e)},extractMeta:function(a,b,c){c&&c.count&&(a.setMetadataFor(b,{count:c.count}),delete c.count)},normalizeAttributes:function(a,b){a.eachAttribute(function(a,c){"date"===c.type&&"object"===Ember.typeOf(b[a])&&b[a].iso&&(b[a]=b[a].iso)}),this._super(a,b)},normalizeRelationships:function(a,b){var c=this.get("store"),d=this;a.eachRelationship(function(a,e){var f=e.options;b[a]&&"belongsTo"===e.kind&&(b[a]=b[a].objectId),b[a]&&"hasMany"===e.kind&&(f.relation&&(b[a]=[],b.links||(b.links={}),b.links[a]=JSON.stringify({typeKey:e.type.typeKey,key:a})),f.array&&b[a].length&&b[a]&&b[a].forEach(function(a,b,f){"Pointer"===a.__type?f[b]=a.objectId:(delete a.__type,delete a.className,a.id=a.objectId,delete a.objectId,a.type=e.type,d.normalizeAttributes(e.type,a),d.normalizeRelationships(e.type,a),c.push(e.type,a))}))},this),this._super(a,b)},serializeIntoHash:function(a,b,c,d){Ember.merge(a,this.serialize(c,d))},serializeAttribute:function(a,b,c,d){"createdAt"===c||"updatedAt"===c||"emailVerified"===c||"sessionToken"===c?delete b[c]:this._super(a,b,c,d)},serializeBelongsTo:function(a,b,c){var d=c.key,e=a.belongsTo(d),f=a.belongsTo(d,{id:!0});b[d]={__type:"Pointer",className:this.parseClassName(e.typeKey),objectId:f}},parseClassName:function(a){return"parseUser"===a?"_User":Ember.String.capitalize(Ember.String.camelize(a))},serializeHasMany:function(a,b,c){var d=c.key,e=a.hasMany(d),f=c.options;if(!Ember.isEmpty(e)&&e.get("length")>0){b[d]={objects:[]},f.relation&&(b[d].__op="AddRelation"),f.array&&(b[d].__op="AddUnique");var g=this;if(e.forEach(function(a){b[d].objects.push({__type:"Pointer",className:g.parseClassName(a.type.typeKey),objectId:a.attr("id")})}),e._deletedItems&&e._deletedItems.length){if(f.relation){var h=b[d],i={__op:"RemoveRelation",objects:[]};e._deletedItems.forEach(function(a){i.objects.push({__type:"Pointer",className:a.type,objectId:a.id})}),b[d]={__op:"Batch",ops:[h,i]}}f.array&&(b[d].deleteds={__op:"Remove",objects:[]},e._deletedItems.forEach(function(a){b[d].deleteds.objects.push({__type:"Pointer",className:a.type,objectId:a.id})}))}}else f.relation||(b[d]=[])}}),EmberParseAdapter.Adapter=DS.RESTAdapter.extend({defaultSerializer:"-parse",init:function(){this._super(),this.set("headers",{"X-Parse-Application-Id":this.get("applicationId"),"X-Parse-REST-API-Key":this.get("restApiId")})},host:"https://api.parse.com",namespace:"1",classesPath:"classes",pathForType:function(a){return"parseUser"===a?"users":"login"===a?"login":"function"===a?"functions":this.classesPath+"/"+this.parsePathForType(a)},parsePathForType:function(a){return Ember.String.capitalize(Ember.String.camelize(a))},createRecord:function(a,b,c){var d={},e=a.serializerFor(b.typeKey),f=c._createSnapshot();e.serializeIntoHash(d,b,f,{includeId:!0});var g=this;return new Ember.RSVP.Promise(function(a,c){g.ajax(g.buildURL(b.typeKey),"POST",{data:d}).then(function(b){var c=Ember.merge(d,b);a(c)},function(a){c(a.responseJSON)})})},updateRecord:function(a,b,c){var d={},e={},f=!1,g=a.serializerFor(b.typeKey),h=c._createSnapshot();g.serializeIntoHash(d,b,h,{includeId:!0});var i=c.get("id"),j=this;return"parseUser"===b.typeKey&&delete d.password,b.eachRelationship(function(a){d[a]&&d[a].deleteds&&(e[a]=d[a].deleteds,delete d[a].deleteds,f=!0)}),new Ember.RSVP.Promise(function(a,c){f?j.ajax(j.buildURL(b.typeKey,i),"PUT",{data:e}).then(function(){j.ajax(j.buildURL(b.typeKey,i),"PUT",{data:d}).then(function(b){var c=Ember.merge(d,b);a(c)},function(a){c("Failed to save parent in relation: "+a.response.JSON)})},function(a){c(a.responseJSON)}):j.ajax(j.buildURL(b.typeKey,i),"PUT",{data:d}).then(function(b){var c=Ember.merge(d,b);a(c)},function(a){c(a.responseJSON)})})},parseClassName:function(a){return"parseUser"===a?"_User":Ember.String.capitalize(Ember.String.camelize(a))},findHasMany:function(a,b,c){var d=JSON.parse(c),e={where:{$relatedTo:{object:{__type:"Pointer",className:this.parseClassName(b.typeKey||b.constructor.typeKey),objectId:b.get("id")},key:d.key}}};return this.ajax(this.buildURL(d.typeKey),"GET",{data:e})},findQuery:function(a,b,c){if(c.where)"string"!==Ember.typeOf(c.where)&&(c.where=JSON.stringify(c.where));else{var d=JSON.stringify(c);c={},c.where=d}return this._super(a,b,c)},sessionToken:Ember.computed("headers.X-Parse-Session-Token",function(a,b){return arguments.length<2?this.get("headers.X-Parse-Session-Token"):(this.set("headers.X-Parse-Session-Token",b),b)})}),EmberParseAdapter.ParseUser=DS.Model.extend({username:DS.attr("string"),password:DS.attr("string"),email:DS.attr("string"),emailVerified:DS.attr("boolean"),sessionToken:DS.attr("string"),createdAt:DS.attr("date"),updatedAt:DS.attr("date")}),EmberParseAdapter.ParseUser.reopenClass({current:function(a){if(Ember.isEmpty(this.typeKey))throw new Error("ParseUser.current must be called on a model fetched via store.modelFor");var b=this,c=a.adapterFor(b),d=a.serializerFor(b);return c.ajax(c.buildURL("parseUser","me"),"GET",{}).then(function(c){return d.normalize(b,c),a.push(b,c)},function(a){return Ember.RSVP.reject(a.responseJSON)})},requestPasswordReset:function(a){var b=this.get("store").adapterFor(this),c={email:a};return b.ajax(b.buildURL("requestPasswordReset"),"POST",{data:c})["catch"](function(a){return Ember.RSVP.reject(a.responseJSON)})},login:function(a,b){if(Ember.isEmpty(this.typeKey))throw new Error("Parse login must be called on a model fetched via store.modelFor");var c=this,d=a.adapterFor(c),e=a.serializerFor(c);return d.ajax(d.buildURL("login"),"GET",{data:b}).then(function(b){e.normalize(c,b);var d=a.push(c,b);return d},function(a){return Ember.RSVP.reject(a.responseJSON)})},signup:function(a,b){if(Ember.isEmpty(this.typeKey))throw new Error("Parse signup must be called on a model fetched via store.modelFor");var c=this,d=a.adapterFor(c),e=a.serializerFor(c);return d.ajax(d.buildURL(c.typeKey),"POST",{data:b}).then(function(d){e.normalize(c,d),d.email=d.email||b.email,d.username=d.username||b.username;var f=a.push(c,d);return f},function(a){return Ember.RSVP.reject(a.responseJSON)})}}),EmberParseAdapter.GeoPoint=Ember.Object.extend({latitude:Ember.computed(function(){return this._latitude}).readOnly(),longitude:Ember.computed(function(){return this._longitude}).readOnly(),init:function(a,b){this._latitude=a,this._longitude=b}}),EmberParseAdapter.File=Ember.Object.extend({name:Ember.computed(function(){return this._name}).readOnly(),url:Ember.computed(function(){return this._url}).readOnly(),init:function(a,b){this._name=a,this._url=b}}),EmberParseAdapter.ACL=Ember.Object.extend({}),EmberParseAdapter.Transforms.ACL=DS.Transform.extend({deserialize:function(a){return a?EmberParseAdapter.ACL.create(a):null},serialize:function(a){if(!a)return null;var b={};return Object.keys(a).forEach(function(c){b[c]=a.get(c)}),b}}),EmberParseAdapter.Transforms.GeoPoint=DS.Transform.extend({deserialize:function(a){return a?new EmberParseAdapter.GeoPoint(a.latitude,a.longitude):null},serialize:function(a){return a?{__type:"GeoPoint",latitude:a.get("latitude"),longitude:a.get("longitude")}:null}}),EmberParseAdapter.Transforms.File=DS.Transform.extend({deserialize:function(a){return a?new EmberParseAdapter.File(a.name,a.url):null},serialize:function(a){return a?{__type:"File",name:a.get("name"),url:a.get("url")}:null}}),EmberParseAdapter.Transforms.Date=DS.Transform.extend({deserialize:function(a){return a?new Date(a.iso):null},serialize:function(a){return a?{__type:"Date",iso:a.toISOString()}:null}}),EmberParseAdapter.setupContainer=function(a){a.register("adapter:-parse",EmberParseAdapter.Adapter),a.register("serializer:-parse",EmberParseAdapter.Serializer),a.register("model:parse-user",EmberParseAdapter.ParseUser),a.register("transform:parse-geo-point",EmberParseAdapter.Transforms.GeoPoint),a.register("transform:parse-file",EmberParseAdapter.Transforms.File),a.register("transform:parse-date",EmberParseAdapter.Transforms.Date),a.register("transform:parse-acl",EmberParseAdapter.Transforms.ACL)},Ember.onLoad("Ember.Application",function(a){a.initializer({after:"ember-data",name:"parse-adapter",initialize:function(a){EmberParseAdapter.setupContainer(a)}})});